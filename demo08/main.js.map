{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./main.ts","webpack:///external \"electron\"","webpack:///external \"path\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAqE;AACrE,IAAM,IAAI,GAAG,mBAAO,CAAC,kBAAM,CAAC,CAAC;AAC7B,2CAA2C;AAC3C,0BAA0B;AAC1B,IAAI,GAAQ,CAAC;AAEb,IAAM,KAAK,GAAG,aAAoB,KAAK,aAAa,CAAC;AAErD,SAAS,YAAY;IACnB,WAAW;IACX,GAAG,GAAG,IAAI,sDAAa,CAAC;QACtB,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;QACX,cAAc,EAAE;YACd,eAAe,EAAE,IAAI;SACtB;KACF,CAAC;IAEF,IAAI,KAAK,EAAE;QACT,GAAG,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;KACtC;SAAM;QACL,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAAC;KAC5D;IAED,yBAAyB;IACzB,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE;QACf,gCAAgC;QAChC,6BAA6B;QAC7B,mBAAmB;QACnB,GAAG,GAAG,IAAI;IACZ,CAAC,CAAC;AACJ,CAAC;AAED,qBAAqB;AACrB,mBAAmB;AACnB,4BAA4B;AAC5B,4CAAG,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC;AAE7B,cAAc;AACd,4CAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;IAC1B,iCAAiC;IACjC,sBAAsB;IACtB,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACjC,4CAAG,CAAC,IAAI,EAAE;KACX;AACH,CAAC,CAAC;AAEF,cAAc;AACd,gDAAO,CAAC,EAAE,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,IAAI;IAClC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IACtC,IAAI,cAAc,GAAG,IAAI,qDAAY,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IACpF,cAAc,CAAC,IAAI,EAAE,CAAC;IACtB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC;AAC9C,CAAC,CAAC;AAEF,4CAAG,CAAC,EAAE,CAAC,UAAU,EAAE;IACjB,gCAAgC;IAChC,oBAAoB;IACpB,IAAI,GAAG,KAAK,IAAI,EAAE;QAChB,YAAY,EAAE;KACf;AACH,CAAC,CAAC;AAEF,yBAAyB;AACzB,6BAA6B;;;;;;;;;;;;AChE7B,qC;;;;;;;;;;;ACAA,iC","file":"./main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main.ts\");\n","import { app, BrowserWindow, ipcMain, Notification } from 'electron';\nconst path = require('path');\n// 保持对window对象的全局引用，如果不这么做的话，当JavaScript对象被\n// 垃圾回收的时候，window对象将会自动的关闭\nlet win: any;\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nfunction createWindow() {\n  // 创建浏览器窗口。\n  win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true\n    }\n  })\n\n  if (isDev) {\n    win.loadURL(`http://localhost:3000`);\n  } else {\n    win.loadFile(path.resolve(__dirname, './dist/index.html'));\n  }\n\n  // 当 window 被关闭，这个事件会被触发。\n  win.on('closed', () => {\n    // 取消引用 window 对象，如果你的应用支持多窗口的话，\n    // 通常会把多个 window 对象存放在一个数组里面，\n    // 与此同时，你应该删除相应的元素。\n    win = null\n  })\n}\n\n// Electron 会在初始化后并准备\n// 创建浏览器窗口时，调用这个函数。\n// 部分 API 在 ready 事件触发后才能使用。\napp.on('ready', createWindow)\n\n// 当全部窗口关闭时退出。\napp.on('window-all-closed', () => {\n  // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，\n  // 否则绝大部分应用及其菜单栏会保持激活。\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// 监听渲染程序发来的事件\nipcMain.on('something', (event, data) => {\n  console.log('接收到render进程发送的消息', data);\n  let myNotification = new Notification({ title: '主进程通知', body: '接收到render进程发送的消息' });\n  myNotification.show();\n  event.sender.send('something1', '我是主进程返回的值')\n})\n\napp.on('activate', () => {\n  // 在macOS上，当单击dock图标并且没有其他窗口打开时，\n  // 通常在应用程序中重新创建一个窗口。\n  if (win === null) {\n    createWindow()\n  }\n})\n\n// 在这个文件中，你可以续写应用剩下主进程代码。\n// 也可以拆分成几个文件，然后用 require 导入。","module.exports = require(\"electron\");","module.exports = require(\"path\");"],"sourceRoot":""}